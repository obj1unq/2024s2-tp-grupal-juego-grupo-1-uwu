import wollok.game.*
import personajes.personaje.*
import personajes.armas.*
import personajes.noel.*
import personajes.dangalf.*
import enemigos.*
import estadosJuego.*
import extras.*
import juego.*
import managers.*
import nivelManager.*
import pantallas.*
import posiciones.*
import proyectiles.*
import stats.*
import tienda.*
import etapas.etapa1.*
import etapas.etapa2.*
import etapas.etapa3.*
import etapas.etapa4.*

describe "desvariados" {
  const cura = new Cura(vidaDada = 20, image = "", position = game.at(0, 1))
  const municion = new Balas(image = "", position = game.at(0, 2))
  const zombie = new ZombieComun(image = "zombieComun-arriba.png", position = game.at(5, 4))
  
  method initialize() {
    juego.estado(jugando)
    game.addVisual(noel)
  }
  
  test "hay cura" {
    assert.that(managerItems.drops().isEmpty())
    managerItems.spawnearCura(1, tablero.posicionRandom())
    
    assert.notThat(managerItems.drops().isEmpty())
  }
  
  test "curación" {
    assert.equals(60, puntosDeVida.vida())
    
    noel.herir(10)
    assert.equals(50, puntosDeVida.vida())
    
    cura.colisionPj()
    assert.equals(60, puntosDeVida.vida())
  }
  
  test "sin munición para disparar" {
    assert.doesNotThrowException({ pistola.validarAtaque() })
    
    pistola.cargador(0)
    assert.throwsException({ pistola.validarAtaque() })
  }
  
  test "hay munición" {
    assert.that(managerItems.drops().isEmpty())
    managerItems.spawnearMunicion(tablero.posicionRandom())
    
    assert.notThat(managerItems.drops().isEmpty())
  }
  
  test "obtener munición" {
    assert.equals(12, pistola.cargador())
    noel.ataque(arriba)
    assert.equals(11, pistola.cargador())
    
    municion.colisionPj()
    assert.equals(12, pistola.cargador())
  }
  
  test "especial no está listo" {
    assert.equals(0, especial.zombiesAsesinados())
    assert.throwsException({ especial.validarEspecial() })
  }
  
  test "especial está listo y disparar" {
    especial.zombiesAsesinados(6)
    assert.equals(6, especial.zombiesAsesinados())
    
    assert.doesNotThrowException({ especial.validarEspecial() })
    
    especial.tirarEspecial()
    assert.throwsException({ especial.validarEspecial() })
  }
  
  test "hay zombie" {
    assert.that(managerZombie.zombies().isEmpty())
    managerZombie.spawneoRandom(1)
    
    assert.notThat(managerZombie.zombies().isEmpty())
  }
  
  test "zombie ataca" {
    game.addVisual(zombie)
    managerZombie.agregarZ(zombie)
    zombie.atacarAgro()

  }
  
  test "zombie muere" {
    
  }
  
  test "sin energía" {
    
  }
  
  test "sin oro para comprar" {
    
  }
  
  test "mejora de vida" {
    
  }
  
  test "mejora de arma" {
    
  }
}